pub fn cv_cuda_SURF_CUDA_SURF_CUDA(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_cuda_SURF_CUDA_SURF_CUDA_double_int_int_bool_float_bool(_hessian_threshold: f64, _n_octaves: i32, _n_octave_layers: i32, _extended: bool, _keypoints_ratio: f32, _upright: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_cuda_SURF_CUDA_SURF_CUDA_double(_hessian_threshold: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_cuda_SURF_CUDA_create_double_int_int_bool_float_bool(_hessian_threshold: f64, _n_octaves: i32, _n_octave_layers: i32, _extended: bool, _keypoints_ratio: f32, _upright: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_cuda_SURF_CUDA_create_double(_hessian_threshold: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_cuda_SURF_CUDA_descriptorSize_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_cuda_SURF_CUDA_defaultNorm_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_cuda_SURF_CUDA_uploadKeypoints_const_vectorLKeyPointGR_GpuMatR(instance: *mut c_void, keypoints: *const c_void, keypoints_gpu: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_downloadKeypoints_const_GpuMatR_vectorLKeyPointGR(instance: *mut c_void, keypoints_gpu: *const c_void, keypoints: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_downloadDescriptors_const_GpuMatR_vectorLfloatGR(instance: *mut c_void, descriptors_gpu: *const c_void, descriptors: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_GpuMatR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_GpuMatR_GpuMatR_bool(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, use_provided_keypoints: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_GpuMatR_GpuMatR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_detect_const_GpuMatR_const_GpuMatR_GpuMatR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_vectorLKeyPointGR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_vectorLKeyPointGR_GpuMatR_bool(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, use_provided_keypoints: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_vectorLKeyPointGR_GpuMatR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_detectWithDescriptors_const_GpuMatR_const_GpuMatR_GpuMatR_GpuMatR_bool(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, use_provided_keypoints: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_detectWithDescriptors_const_GpuMatR_const_GpuMatR_GpuMatR_GpuMatR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_vectorLKeyPointGR_vectorLfloatGR_bool(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, use_provided_keypoints: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_operator___const_GpuMatR_const_GpuMatR_vectorLKeyPointGR_vectorLfloatGR(instance: *mut c_void, img: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_releaseMemory(instance: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_cuda_SURF_CUDA_propHessianThreshold_const(instance: *const c_void) -> f64;
pub fn cv_cuda_SURF_CUDA_propHessianThreshold_const_double(instance: *mut c_void, val: f64);
pub fn cv_cuda_SURF_CUDA_propNOctaves_const(instance: *const c_void) -> i32;
pub fn cv_cuda_SURF_CUDA_propNOctaves_const_int(instance: *mut c_void, val: i32);
pub fn cv_cuda_SURF_CUDA_propNOctaveLayers_const(instance: *const c_void) -> i32;
pub fn cv_cuda_SURF_CUDA_propNOctaveLayers_const_int(instance: *mut c_void, val: i32);
pub fn cv_cuda_SURF_CUDA_propExtended_const(instance: *const c_void) -> bool;
pub fn cv_cuda_SURF_CUDA_propExtended_const_bool(instance: *mut c_void, val: bool);
pub fn cv_cuda_SURF_CUDA_propUpright_const(instance: *const c_void) -> bool;
pub fn cv_cuda_SURF_CUDA_propUpright_const_bool(instance: *mut c_void, val: bool);
pub fn cv_cuda_SURF_CUDA_propKeypointsRatio_const(instance: *const c_void) -> f32;
pub fn cv_cuda_SURF_CUDA_propKeypointsRatio_const_float(instance: *mut c_void, val: f32);
pub fn cv_cuda_SURF_CUDA_propSum_const(instance: *const c_void) -> *mut c_void;
pub fn cv_cuda_SURF_CUDA_propSum_const_GpuMat(instance: *mut c_void, val: *const c_void);
pub fn cv_cuda_SURF_CUDA_propMask1_const(instance: *const c_void) -> *mut c_void;
pub fn cv_cuda_SURF_CUDA_propMask1_const_GpuMat(instance: *mut c_void, val: *const c_void);
pub fn cv_cuda_SURF_CUDA_propMaskSum_const(instance: *const c_void) -> *mut c_void;
pub fn cv_cuda_SURF_CUDA_propMaskSum_const_GpuMat(instance: *mut c_void, val: *const c_void);
pub fn cv_cuda_SURF_CUDA_propDet_const(instance: *const c_void) -> *mut c_void;
pub fn cv_cuda_SURF_CUDA_propDet_const_GpuMat(instance: *mut c_void, val: *const c_void);
pub fn cv_cuda_SURF_CUDA_propTrace_const(instance: *const c_void) -> *mut c_void;
pub fn cv_cuda_SURF_CUDA_propTrace_const_GpuMat(instance: *mut c_void, val: *const c_void);
pub fn cv_cuda_SURF_CUDA_propMaxPosBuffer_const(instance: *const c_void) -> *mut c_void;
pub fn cv_cuda_SURF_CUDA_propMaxPosBuffer_const_GpuMat(instance: *mut c_void, val: *const c_void);
pub fn cv_cuda_SURF_CUDA_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_AffineFeature2D_create_PtrLFeature2DG_PtrLFeature2DG(keypoint_detector: *mut c_void, descriptor_extractor: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_AffineFeature2D_create_PtrLFeature2DG(keypoint_detector: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_AffineFeature2D_detect_const__InputArrayR_vectorLElliptic_KeyPointGR_const__InputArrayR(instance: *mut c_void, image: *const c_void, keypoints: *mut c_void, mask: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_AffineFeature2D_detect_const__InputArrayR_vectorLElliptic_KeyPointGR(instance: *mut c_void, image: *const c_void, keypoints: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_AffineFeature2D_detectAndCompute_const__InputArrayR_const__InputArrayR_vectorLElliptic_KeyPointGR_const__OutputArrayR_bool(instance: *mut c_void, image: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *const c_void, use_provided_keypoints: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_AffineFeature2D_detectAndCompute_const__InputArrayR_const__InputArrayR_vectorLElliptic_KeyPointGR_const__OutputArrayR(instance: *mut c_void, image: *const c_void, mask: *const c_void, keypoints: *mut c_void, descriptors: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_AffineFeature2D_to_TBMR(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_AffineFeature2D_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_AffineFeature2D_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_AffineFeature2D_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_BEBLID_create_float_int(scale_factor: f32, n_bits: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BEBLID_create_float(scale_factor: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BEBLID_setScaleFactor_float(instance: *mut c_void, scale_factor: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_BEBLID_getScaleFactor_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_BEBLID_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BEBLID_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_BEBLID_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_BEBLID_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_BoostDesc_create_int_bool_float(desc: i32, use_scale_orientation: bool, scale_factor: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BoostDesc_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BoostDesc_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BoostDesc_setUseScaleOrientation_const_bool(instance: *mut c_void, use_scale_orientation: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_BoostDesc_getUseScaleOrientation_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_BoostDesc_setScaleFactor_const_float(instance: *mut c_void, scale_factor: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_BoostDesc_getScaleFactor_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_BoostDesc_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_BoostDesc_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_BoostDesc_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_create_int_bool(bytes: i32, use_orientation: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_setDescriptorSize_int(instance: *mut c_void, bytes: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_getDescriptorSize_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_setUseOrientation_bool(instance: *mut c_void, use_orientation: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_getUseOrientation_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_BriefDescriptorExtractor_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_BriefDescriptorExtractor_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_BriefDescriptorExtractor_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_DAISY_create_float_int_int_int_NormalizationType_const__InputArrayR_bool_bool(radius: f32, q_radius: i32, q_theta: i32, q_hist: i32, norm: crate::xfeatures2d::DAISY_NormalizationType, h: *const c_void, interpolation: bool, use_orientation: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_DAISY_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_DAISY_setRadius_float(instance: *mut c_void, radius: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getRadius_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_DAISY_setQRadius_int(instance: *mut c_void, q_radius: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getQRadius_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_DAISY_setQTheta_int(instance: *mut c_void, q_theta: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getQTheta_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_DAISY_setQHist_int(instance: *mut c_void, q_hist: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getQHist_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_DAISY_setNorm_int(instance: *mut c_void, norm: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getNorm_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_DAISY_setH_const__InputArrayR(instance: *mut c_void, h: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getH_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_DAISY_setInterpolation_bool(instance: *mut c_void, interpolation: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getInterpolation_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_DAISY_setUseOrientation_bool(instance: *mut c_void, use_orientation: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_getUseOrientation_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_DAISY_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_DAISY_compute_const__InputArrayR_vectorLKeyPointGR_const__OutputArrayR(instance: *mut c_void, image: *const c_void, keypoints: *mut c_void, descriptors: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_compute_const__InputArrayR_vectorLvectorLKeyPointGGR_const__OutputArrayR(instance: *mut c_void, images: *const c_void, keypoints: *mut c_void, descriptors: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_compute_const__InputArrayR_Rect_const__OutputArrayR(instance: *mut c_void, image: *const c_void, roi: *const core::Rect, descriptors: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_compute_const__InputArrayR_const__OutputArrayR(instance: *mut c_void, image: *const c_void, descriptors: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_GetDescriptor_const_double_double_int_floatX(instance: *const c_void, y: f64, x: f64, orientation: i32, descriptor: *mut f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_GetDescriptor_const_double_double_int_floatX_doubleX(instance: *const c_void, y: f64, x: f64, orientation: i32, descriptor: *mut f32, h: *mut f64, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_DAISY_GetUnnormalizedDescriptor_const_double_double_int_floatX(instance: *const c_void, y: f64, x: f64, orientation: i32, descriptor: *mut f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_DAISY_GetUnnormalizedDescriptor_const_double_double_int_floatX_doubleX(instance: *const c_void, y: f64, x: f64, orientation: i32, descriptor: *mut f32, h: *mut f64, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_DAISY_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_DAISY_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_DAISY_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_Elliptic_KeyPoint(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_Elliptic_KeyPoint_Point2f_float_Size_float_float(pt: *const core::Point2f, angle: f32, axes: *const core::Size, size: f32, si: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_propAxes_const(instance: *const c_void, ocvrs_return: *mut core::Size_<f32>);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_propAxes_const_Size_LfloatG(instance: *mut c_void, val: *const core::Size_<f32>);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_propSi_const(instance: *const c_void) -> f32;
pub fn cv_xfeatures2d_Elliptic_KeyPoint_propSi_const_float(instance: *mut c_void, val: f32);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_propTransf_const(instance: *const c_void, ocvrs_return: *mut core::Matx23f);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_propTransf_const_Matx23f(instance: *mut c_void, val: *const core::Matx23f);
pub fn cv_xfeatures2d_Elliptic_KeyPoint_to_KeyPoint(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_Elliptic_KeyPoint_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_FREAK_create_bool_bool_float_int_const_vectorLintGR(orientation_normalized: bool, scale_normalized: bool, pattern_scale: f32, n_octaves: i32, selected_pairs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_FREAK_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_FREAK_setOrientationNormalized_bool(instance: *mut c_void, orientation_normalized: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_FREAK_getOrientationNormalized_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_FREAK_setScaleNormalized_bool(instance: *mut c_void, scale_normalized: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_FREAK_getScaleNormalized_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_FREAK_setPatternScale_double(instance: *mut c_void, pattern_scale: f64, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_FREAK_getPatternScale_const(instance: *const c_void, ocvrs_return: *mut Result<f64>);
pub fn cv_xfeatures2d_FREAK_setNOctaves_int(instance: *mut c_void, n_octaves: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_FREAK_getNOctaves_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_FREAK_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_FREAK_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_FREAK_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_FREAK_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_create_int_float_float_int_int(num_octaves: i32, corn_thresh: f32, dog_thresh: f32, max_corners: i32, num_layers: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_setNumOctaves_int(instance: *mut c_void, num_octaves_: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_getNumOctaves_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_setCornThresh_float(instance: *mut c_void, corn_thresh_: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_getCornThresh_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_setDOGThresh_float(instance: *mut c_void, dog_thresh_: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_getDOGThresh_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_setMaxCorners_int(instance: *mut c_void, max_corners_: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_getMaxCorners_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_setNumLayers_int(instance: *mut c_void, num_layers_: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_getNumLayers_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_HarrisLaplaceFeatureDetector_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_LATCH_create_int_bool_int_double(bytes: i32, rotation_invariance: bool, half_ssd_size: i32, sigma: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_LATCH_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_LATCH_setBytes_int(instance: *mut c_void, bytes: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_LATCH_getBytes_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_LATCH_setRotationInvariance_bool(instance: *mut c_void, rotation_invariance: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_LATCH_getRotationInvariance_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_LATCH_setHalfSSDsize_int(instance: *mut c_void, half_ssd_size: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_LATCH_getHalfSSDsize_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_LATCH_setSigma_double(instance: *mut c_void, sigma: f64, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_LATCH_getSigma_const(instance: *const c_void, ocvrs_return: *mut Result<f64>);
pub fn cv_xfeatures2d_LATCH_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_LATCH_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_LATCH_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_LATCH_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_LUCID_create_const_int_const_int(lucid_kernel: i32, blur_kernel: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_LUCID_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_LUCID_setLucidKernel_int(instance: *mut c_void, lucid_kernel: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_LUCID_getLucidKernel_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_LUCID_setBlurKernel_int(instance: *mut c_void, blur_kernel: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_LUCID_getBlurKernel_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_LUCID_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_LUCID_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_LUCID_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_LUCID_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_MSDDetector_create_int_int_int_int_float_int_float_int_bool(m_patch_radius: i32, m_search_area_radius: i32, m_nms_radius: i32, m_nms_scale_radius: i32, m_th_saliency: f32, m_k_nn: i32, m_scale_factor: f32, m_n_scales: i32, m_compute_orientation: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_MSDDetector_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_MSDDetector_setPatchRadius_int(instance: *mut c_void, patch_radius: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getPatchRadius_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_MSDDetector_setSearchAreaRadius_int(instance: *mut c_void, use_orientation: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getSearchAreaRadius_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_MSDDetector_setNmsRadius_int(instance: *mut c_void, nms_radius: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getNmsRadius_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_MSDDetector_setNmsScaleRadius_int(instance: *mut c_void, nms_scale_radius: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getNmsScaleRadius_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_MSDDetector_setThSaliency_float(instance: *mut c_void, th_saliency: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getThSaliency_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_MSDDetector_setKNN_int(instance: *mut c_void, k_nn: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getKNN_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_MSDDetector_setScaleFactor_float(instance: *mut c_void, scale_factor: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getScaleFactor_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_MSDDetector_setNScales_int(instance: *mut c_void, use_orientation: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getNScales_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_MSDDetector_setComputeOrientation_bool(instance: *mut c_void, compute_orientation: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_MSDDetector_getComputeOrientation_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_MSDDetector_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_MSDDetector_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_MSDDetector_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_MSDDetector_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_PCTSignatures_create_const_int_const_int_const_int(init_sample_count: i32, init_seed_count: i32, point_distribution: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignatures_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignatures_create_const_vectorLPoint2fGR_const_int(init_sampling_points: *const c_void, init_seed_count: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignatures_create_const_vectorLPoint2fGR_const_vectorLintGR(init_sampling_points: *const c_void, init_cluster_seed_indexes: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignatures_computeSignature_const_const__InputArrayR_const__OutputArrayR(instance: *const c_void, image: *const c_void, signature: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_computeSignatures_const_const_vectorLMatGR_vectorLMatGR(instance: *const c_void, images: *const c_void, signatures: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_drawSignature_const__InputArrayR_const__InputArrayR_const__OutputArrayR_float_int(source: *const c_void, signature: *const c_void, result: *const c_void, radius_to_shorter_side_ratio: f32, border_thickness: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_drawSignature_const__InputArrayR_const__InputArrayR_const__OutputArrayR(source: *const c_void, signature: *const c_void, result: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_generateInitPoints_vectorLPoint2fGR_const_int_int(init_points: *mut c_void, count: i32, point_distribution: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getSampleCount_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_getGrayscaleBits_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_setGrayscaleBits_int(instance: *mut c_void, grayscale_bits: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWindowRadius_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_setWindowRadius_int(instance: *mut c_void, radius: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightX_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightX_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightY_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightY_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightL_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightL_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightA_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightA_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightB_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightB_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightContrast_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightContrast_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getWeightEntropy_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setWeightEntropy_float(instance: *mut c_void, weight: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getSamplingPoints_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignatures_setWeight_int_float(instance: *mut c_void, idx: i32, value: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_setWeights_const_vectorLfloatGR(instance: *mut c_void, weights: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_setTranslation_int_float(instance: *mut c_void, idx: i32, value: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_setTranslations_const_vectorLfloatGR(instance: *mut c_void, translations: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_setSamplingPoints_vectorLPoint2fG(instance: *mut c_void, sampling_points: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getInitSeedIndexes_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignatures_setInitSeedIndexes_vectorLintG(instance: *mut c_void, init_seed_indexes: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getInitSeedCount_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_getIterationCount_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_setIterationCount_int(instance: *mut c_void, iteration_count: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getMaxClustersCount_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_setMaxClustersCount_int(instance: *mut c_void, max_clusters_count: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getClusterMinSize_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_setClusterMinSize_int(instance: *mut c_void, cluster_min_size: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getJoiningDistance_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setJoiningDistance_float(instance: *mut c_void, joining_distance: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getDropThreshold_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignatures_setDropThreshold_float(instance: *mut c_void, drop_threshold: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_getDistanceFunction_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_PCTSignatures_setDistanceFunction_int(instance: *mut c_void, distance_function: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignatures_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_PCTSignatures_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_PCTSignaturesSQFD_create_const_int_const_int_const_float(distance_function: i32, similarity_function: i32, similarity_parameter: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignaturesSQFD_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_PCTSignaturesSQFD_computeQuadraticFormDistance_const_const__InputArrayR_const__InputArrayR(instance: *const c_void, _signature0: *const c_void, _signature1: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_PCTSignaturesSQFD_computeQuadraticFormDistances_const_const_MatR_const_vectorLMatGR_vectorLfloatGR(instance: *const c_void, source_signature: *const c_void, image_signatures: *const c_void, distances: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_PCTSignaturesSQFD_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_PCTSignaturesSQFD_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_SURF_create_double_int_int_bool_bool(hessian_threshold: f64, n_octaves: i32, n_octave_layers: i32, extended: bool, upright: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_SURF_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_SURF_setHessianThreshold_double(instance: *mut c_void, hessian_threshold: f64, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_SURF_getHessianThreshold_const(instance: *const c_void, ocvrs_return: *mut Result<f64>);
pub fn cv_xfeatures2d_SURF_setNOctaves_int(instance: *mut c_void, n_octaves: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_SURF_getNOctaves_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_SURF_setNOctaveLayers_int(instance: *mut c_void, n_octave_layers: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_SURF_getNOctaveLayers_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_SURF_setExtended_bool(instance: *mut c_void, extended: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_SURF_getExtended_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_SURF_setUpright_bool(instance: *mut c_void, upright: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_SURF_getUpright_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_SURF_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_SURF_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_SURF_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_SURF_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_StarDetector_create_int_int_int_int_int(max_size: i32, response_threshold: i32, line_threshold_projected: i32, line_threshold_binarized: i32, suppress_nonmax_size: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_StarDetector_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_StarDetector_setMaxSize_int(instance: *mut c_void, _max_size: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_StarDetector_getMaxSize_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_StarDetector_setResponseThreshold_int(instance: *mut c_void, _response_threshold: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_StarDetector_getResponseThreshold_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_StarDetector_setLineThresholdProjected_int(instance: *mut c_void, _line_threshold_projected: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_StarDetector_getLineThresholdProjected_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_StarDetector_setLineThresholdBinarized_int(instance: *mut c_void, _line_threshold_binarized: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_StarDetector_getLineThresholdBinarized_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_StarDetector_setSuppressNonmaxSize_int(instance: *mut c_void, _suppress_nonmax_size: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_StarDetector_getSuppressNonmaxSize_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_StarDetector_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_StarDetector_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_StarDetector_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_StarDetector_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_TBMR_create_int_float_float_int(min_area: i32, max_area_relative: f32, scale_factor: f32, n_scales: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_TBMR_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_TBMR_setMinArea_int(instance: *mut c_void, min_area: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_TBMR_getMinArea_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_TBMR_setMaxAreaRelative_float(instance: *mut c_void, max_area: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_TBMR_getMaxAreaRelative_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_TBMR_setScaleFactor_float(instance: *mut c_void, scale_factor: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_TBMR_getScaleFactor_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_TBMR_setNScales_int(instance: *mut c_void, n_scales: i32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_TBMR_getNScales_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_xfeatures2d_TBMR_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_TBMR_to_AffineFeature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_TBMR_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_TBMR_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_TBMR_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_TEBLID_create_float_int(scale_factor: f32, n_bits: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_TEBLID_create_float(scale_factor: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_TEBLID_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_TEBLID_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_TEBLID_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_TEBLID_delete(instance: *mut c_void);
pub fn cv_xfeatures2d_VGG_create_int_float_bool_bool_float_bool(desc: i32, isigma: f32, img_normalize: bool, use_scale_orientation: bool, scale_factor: f32, dsc_normalize: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_VGG_create(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_VGG_getDefaultName_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_xfeatures2d_VGG_setSigma_const_float(instance: *mut c_void, isigma: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_VGG_getSigma_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_VGG_setUseNormalizeImage_const_bool(instance: *mut c_void, img_normalize: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_VGG_getUseNormalizeImage_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_VGG_setUseScaleOrientation_const_bool(instance: *mut c_void, use_scale_orientation: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_VGG_getUseScaleOrientation_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_VGG_setScaleFactor_const_float(instance: *mut c_void, scale_factor: f32, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_VGG_getScaleFactor_const(instance: *const c_void, ocvrs_return: *mut Result<f32>);
pub fn cv_xfeatures2d_VGG_setUseNormalizeDescriptor_const_bool(instance: *mut c_void, dsc_normalize: bool, ocvrs_return: *mut ResultVoid);
pub fn cv_xfeatures2d_VGG_getUseNormalizeDescriptor_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_xfeatures2d_VGG_to_Algorithm(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_VGG_to_Feature2D(instance: *mut c_void) -> *mut c_void;
pub fn cv_xfeatures2d_VGG_delete(instance: *mut c_void);
