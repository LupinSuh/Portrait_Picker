pub fn cv_descr_of_const_MatR(mat: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_descr_of_const_MediaFrameR(frame: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_descr_of_const_RMatR(mat: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_descr_of_const_ScalarR(scalar: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_descr_of_const_UMatR(mat: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_empty_array_desc(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_empty_gopaque_desc(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_empty_scalar_desc(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_BGR2Gray_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_BGR2I420_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_BGR2LUV_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_BGR2RGB_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_BGR2YUV_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_BayerGR2RGB_const_GMatR(src_gr: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_Canny_const_GMatR_double_double(image: *const c_void, threshold1: f64, threshold2: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_Canny_const_GMatR_double_double_int_bool(image: *const c_void, threshold1: f64, threshold2: f64, aperture_size: i32, l2gradient: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_I4202BGR_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_I4202RGB_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_LUT_const_GMatR_const_MatR(src: *const c_void, lut: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_LUV2BGR_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_Laplacian_const_GMatR_int(src: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_Laplacian_const_GMatR_int_int_double_double_int(src: *const c_void, ddepth: i32, ksize: i32, scale: f64, delta: f64, border_type: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_NV12toBGR_const_GMatR_const_GMatR(src_y: *const c_void, src_uv: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_NV12toBGRp_const_GMatR_const_GMatR(src_y: *const c_void, src_uv: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_NV12toGray_const_GMatR_const_GMatR(src_y: *const c_void, src_uv: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_NV12toRGB_const_GMatR_const_GMatR(src_y: *const c_void, src_uv: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_NV12toRGBp_const_GMatR_const_GMatR(src_y: *const c_void, src_uv: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2Gray_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2Gray_const_GMatR_float_float_float(src: *const c_void, r_y: f32, g_y: f32, b_y: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2HSV_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2I420_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2Lab_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2YUV422_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_RGB2YUV_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_SobelXY_const_GMatR_int_int(src: *const c_void, ddepth: i32, order: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_SobelXY_const_GMatR_int_int_int_double_double_int_const_ScalarR(src: *const c_void, ddepth: i32, order: i32, ksize: i32, scale: f64, delta: f64, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_Sobel_const_GMatR_int_int_int(src: *const c_void, ddepth: i32, dx: i32, dy: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_Sobel_const_GMatR_int_int_int_int_double_double_int_const_ScalarR(src: *const c_void, ddepth: i32, dx: i32, dy: i32, ksize: i32, scale: f64, delta: f64, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_YUV2BGR_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_YUV2RGB_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_absDiffC_const_GMatR_const_GScalarR(src: *const c_void, c: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_absDiff_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_addC_const_GMatR_const_GScalarR(src1: *const c_void, c: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_addC_const_GMatR_const_GScalarR_int(src1: *const c_void, c: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_addC_const_GScalarR_const_GMatR(c: *const c_void, src1: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_addC_const_GScalarR_const_GMatR_int(c: *const c_void, src1: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_addWeighted_const_GMatR_double_const_GMatR_double_double(src1: *const c_void, alpha: f64, src2: *const c_void, beta: f64, gamma: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_addWeighted_const_GMatR_double_const_GMatR_double_double_int(src1: *const c_void, alpha: f64, src2: *const c_void, beta: f64, gamma: f64, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_add_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_add_const_GMatR_const_GMatR_int(src1: *const c_void, src2: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bilateralFilter_const_GMatR_int_double_double(src: *const c_void, d: i32, sigma_color: f64, sigma_space: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bilateralFilter_const_GMatR_int_double_double_int(src: *const c_void, d: i32, sigma_color: f64, sigma_space: f64, border_type: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_and_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_and_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_not_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_or_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_or_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_xor_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_bitwise_xor_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_blur_const_GMatR_const_SizeR(src: *const c_void, ksize: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_blur_const_GMatR_const_SizeR_const_PointR_int_const_ScalarR(src: *const c_void, ksize: *const core::Size, anchor: *const core::Point, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_boxFilter_const_GMatR_int_const_SizeR(src: *const c_void, dtype: i32, ksize: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_boxFilter_const_GMatR_int_const_SizeR_const_PointR_bool_int_const_ScalarR(src: *const c_void, dtype: i32, ksize: *const core::Size, anchor: *const core::Point, normalize: bool, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cartToPolar_const_GMatR_const_GMatR(x: *const c_void, y: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cartToPolar_const_GMatR_const_GMatR_bool(x: *const c_void, y: *const c_void, angle_in_degrees: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpEQ_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpEQ_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpGE_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpGE_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpGT_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpGT_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpLE_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpLE_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpLT_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpLT_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpNE_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_cmpNE_const_GMatR_const_GScalarR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_combine_const_GKernelPackageR_const_GKernelPackageR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_concatHor_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_concatHor_const_vectorLGMatGR(v: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_concatVert_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_concatVert_const_vectorLGMatGR(v: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_convertTo_const_GMatR_int(src: *const c_void, rdepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_convertTo_const_GMatR_int_double_double(src: *const c_void, rdepth: i32, alpha: f64, beta: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_copy_const_GFrameR(in_: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_copy_const_GMatR(in_: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_crop_const_GMatR_const_RectR(src: *const c_void, rect: *const core::Rect, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_dilate3x3_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_dilate3x3_const_GMatR_int_int_const_ScalarR(src: *const c_void, iterations: i32, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_dilate_const_GMatR_const_MatR(src: *const c_void, kernel: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_dilate_const_GMatR_const_MatR_const_PointR_int_int_const_ScalarR(src: *const c_void, kernel: *const c_void, anchor: *const core::Point, iterations: i32, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_divC_const_GMatR_const_GScalarR_double(src: *const c_void, divisor: *const c_void, scale: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_divC_const_GMatR_const_GScalarR_double_int(src: *const c_void, divisor: *const c_void, scale: f64, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_divRC_const_GScalarR_const_GMatR_double(divident: *const c_void, src: *const c_void, scale: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_divRC_const_GScalarR_const_GMatR_double_int(divident: *const c_void, src: *const c_void, scale: f64, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_div_const_GMatR_const_GMatR_double(src1: *const c_void, src2: *const c_void, scale: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_div_const_GMatR_const_GMatR_double_int(src1: *const c_void, src2: *const c_void, scale: f64, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_equalizeHist_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_erode3x3_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_erode3x3_const_GMatR_int_int_const_ScalarR(src: *const c_void, iterations: i32, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_erode_const_GMatR_const_MatR(src: *const c_void, kernel: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_erode_const_GMatR_const_MatR_const_PointR_int_int_const_ScalarR(src: *const c_void, kernel: *const c_void, anchor: *const core::Point, iterations: i32, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_filter2D_const_GMatR_int_const_MatR(src: *const c_void, ddepth: i32, kernel: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_filter2D_const_GMatR_int_const_MatR_const_PointR_const_ScalarR_int_const_ScalarR(src: *const c_void, ddepth: i32, kernel: *const c_void, anchor: *const core::Point, delta: *const core::Scalar, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_flip_const_GMatR_int(src: *const c_void, flip_code: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_gaussianBlur_const_GMatR_const_SizeR_double(src: *const c_void, ksize: *const core::Size, sigma_x: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_gaussianBlur_const_GMatR_const_SizeR_double_double_int_const_ScalarR(src: *const c_void, ksize: *const core::Size, sigma_x: f64, sigma_y: f64, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_inRange_const_GMatR_const_GScalarR_const_GScalarR(src: *const c_void, thresh_low: *const c_void, thresh_up: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_integral_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_integral_const_GMatR_int_int(src: *const c_void, sdepth: i32, sqdepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mask_const_GMatR_const_GMatR(src: *const c_void, mask: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_max_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mean_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_medianBlur_const_GMatR_int(src: *const c_void, ksize: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_merge3_const_GMatR_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, src3: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_merge4_const_GMatR_const_GMatR_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, src3: *const c_void, src4: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_min_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_morphologyEx_const_GMatR_const_MorphTypes_const_MatR(src: *const c_void, op: crate::imgproc::MorphTypes, kernel: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_morphologyEx_const_GMatR_const_MorphTypes_const_MatR_const_PointR_const_int_const_BorderTypes_const_ScalarR(src: *const c_void, op: crate::imgproc::MorphTypes, kernel: *const c_void, anchor: *const core::Point, iterations: i32, border_type: core::BorderTypes, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mulC_const_GMatR_const_GScalarR(src: *const c_void, multiplier: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mulC_const_GMatR_const_GScalarR_int(src: *const c_void, multiplier: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mulC_const_GMatR_double(src: *const c_void, multiplier: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mulC_const_GMatR_double_int(src: *const c_void, multiplier: f64, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mulC_const_GScalarR_const_GMatR(multiplier: *const c_void, src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mulC_const_GScalarR_const_GMatR_int(multiplier: *const c_void, src: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mul_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_mul_const_GMatR_const_GMatR_double_int(src1: *const c_void, src2: *const c_void, scale: f64, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_normInf_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_normL1_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_normL2_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_normalize_const_GMatR_double_double_int(src: *const c_void, alpha: f64, beta: f64, norm_type: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_normalize_const_GMatR_double_double_int_int(src: *const c_void, alpha: f64, beta: f64, norm_type: i32, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_phase_const_GMatR_const_GMatR(x: *const c_void, y: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_phase_const_GMatR_const_GMatR_bool(x: *const c_void, y: *const c_void, angle_in_degrees: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_polarToCart_const_GMatR_const_GMatR(magnitude: *const c_void, angle: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_polarToCart_const_GMatR_const_GMatR_bool(magnitude: *const c_void, angle: *const c_void, angle_in_degrees: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_remap_const_GMatR_const_MatR_const_MatR_int(src: *const c_void, map1: *const c_void, map2: *const c_void, interpolation: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_remap_const_GMatR_const_MatR_const_MatR_int_int_const_ScalarR(src: *const c_void, map1: *const c_void, map2: *const c_void, interpolation: i32, border_mode: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_resizeP_const_GMatPR_const_SizeR(src: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_resizeP_const_GMatPR_const_SizeR_int(src: *const c_void, dsize: *const core::Size, interpolation: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_resize_const_GMatR_const_SizeR(src: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_resize_const_GMatR_const_SizeR_double_double_int(src: *const c_void, dsize: *const core::Size, fx: f64, fy: f64, interpolation: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_select_const_GMatR_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, mask: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_sepFilter_const_GMatR_int_const_MatR_const_MatR_const_PointR_const_ScalarR(src: *const c_void, ddepth: i32, kernel_x: *const c_void, kernel_y: *const c_void, anchor: *const core::Point, delta: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_sepFilter_const_GMatR_int_const_MatR_const_MatR_const_PointR_const_ScalarR_int_const_ScalarR(src: *const c_void, ddepth: i32, kernel_x: *const c_void, kernel_y: *const c_void, anchor: *const core::Point, delta: *const core::Scalar, border_type: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_split3_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_split4_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_sqrt_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_streaming_BGR_const_GFrameR(in_: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_streaming_UV_const_GFrameR(frame: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_streaming_Y_const_GFrameR(frame: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_streaming_desync_const_GFrameR(f: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_streaming_desync_const_GMatR(g: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_streaming_kernels(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_subC_const_GMatR_const_GScalarR(src: *const c_void, c: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_subC_const_GMatR_const_GScalarR_int(src: *const c_void, c: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_subRC_const_GScalarR_const_GMatR(c: *const c_void, src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_subRC_const_GScalarR_const_GMatR_int(c: *const c_void, src: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_sub_const_GMatR_const_GMatR(src1: *const c_void, src2: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_sub_const_GMatR_const_GMatR_int(src1: *const c_void, src2: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_sum_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_threshold_const_GMatR_const_GScalarR_const_GScalarR_int(src: *const c_void, thresh: *const c_void, maxval: *const c_void, typ: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_threshold_const_GMatR_const_GScalarR_int(src: *const c_void, maxval: *const c_void, typ: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_transpose_const_GMatR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_warpAffine_const_GMatR_const_MatR_const_SizeR(src: *const c_void, m: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_warpAffine_const_GMatR_const_MatR_const_SizeR_int_int_const_ScalarR(src: *const c_void, m: *const c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_warpPerspective_const_GMatR_const_MatR_const_SizeR(src: *const c_void, m: *const c_void, dsize: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_warpPerspective_const_GMatR_const_MatR_const_SizeR_int_int_const_ScalarR(src: *const c_void, m: *const c_void, dsize: *const core::Size, flags: i32, border_mode: i32, border_value: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorA_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorA_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorA_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorD_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorD_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorD_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorEQ_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorEQ_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorEQ_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorGE_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorGE_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorGE_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorG_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorG_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorG_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorLE_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorLE_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorLE_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorL_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorL_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorL_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorNE_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorNE_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorNE_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorNOTB_const_GMatR(lhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorOR_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorOR_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorOR_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorR_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorR_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorR_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorS_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorS_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorS_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorXOR_const_GMatR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorXOR_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorXOR_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorX_const_GMatR_const_GScalarR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorX_const_GMatR_float(lhs: *const c_void, rhs: f32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorX_const_GScalarR_const_GMatR(lhs: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_operatorX_float_const_GMatR(lhs: f32, rhs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_validate_input_arg_const_GRunArgR(arg: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_validate_input_args_const_GRunArgsR(args: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GArg_GArg(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GArg_propKind_const(instance: *const c_void, ocvrs_return: *mut crate::gapi::Detail_ArgKind);
pub fn cv_GArg_propKind_const_ArgKind(instance: *mut c_void, val: crate::gapi::Detail_ArgKind);
pub fn cv_GArg_propOpaque_kind_const(instance: *const c_void, ocvrs_return: *mut crate::gapi::Detail_OpaqueKind);
pub fn cv_GArg_propOpaque_kind_const_OpaqueKind(instance: *mut c_void, val: crate::gapi::Detail_OpaqueKind);
pub fn cv_GArg_delete(instance: *mut c_void);
pub fn cv_GArrayDesc_operatorEQ_const_const_GArrayDescR(instance: *const c_void, unnamed: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GArrayDesc_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GArrayDesc_defaultNew_const() -> *mut c_void;
pub fn cv_GArrayDesc_delete(instance: *mut c_void);
pub fn cv_GCall_GCall_const_GKernelR(k: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yield_int(instance: *mut c_void, output: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yield(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yieldP_int(instance: *mut c_void, output: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yieldP(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yieldScalar_int(instance: *mut c_void, output: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yieldScalar(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yieldFrame_int(instance: *mut c_void, output: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_yieldFrame(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_kernel(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_params(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCall_setArgs_vectorLGArgGRR(instance: *mut c_void, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GCall_delete(instance: *mut c_void);
pub fn cv_GCompileArg_GCompileArg() -> *mut c_void;
pub fn cv_GCompileArg_propTag_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GCompileArg_propTag_const_string(instance: *mut c_void, val: *const c_char);
pub fn cv_GCompileArg_delete(instance: *mut c_void);
pub fn cv_GCompiled_GCompiled(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GCompiled_operator___Mat_MatR(instance: *mut c_void, in_: *mut c_void, out: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GCompiled_operator___Mat_ScalarR(instance: *mut c_void, in_: *mut c_void, out: *mut core::Scalar, ocvrs_return: *mut ResultVoid);
pub fn cv_GCompiled_operator___Mat_Mat_MatR(instance: *mut c_void, in1: *mut c_void, in2: *mut c_void, out: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GCompiled_operator___Mat_Mat_ScalarR(instance: *mut c_void, in1: *mut c_void, in2: *mut c_void, out: *mut core::Scalar, ocvrs_return: *mut ResultVoid);
pub fn cv_GCompiled_operator___const_vectorLMatGR_const_vectorLMatGR(instance: *mut c_void, ins: *const c_void, outs: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GCompiled_operator_bool_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GCompiled_canReshape_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GCompiled_prepareForNewStream(instance: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GCompiled_delete(instance: *mut c_void);
pub fn cv_GComputation_GComputation_GMat_GMat(in_: *mut c_void, out: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_GComputation_GMat_GScalar(in_: *mut c_void, out: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_GComputation_GMat_GMat_GMat(in1: *mut c_void, in2: *mut c_void, out: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_GComputation_GMat_GMat_GScalar(in1: *mut c_void, in2: *mut c_void, out: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_GComputation_const_vectorLGMatGR_const_vectorLGMatGR(ins: *const c_void, outs: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_apply_const_ExtractArgsCallbackR_GCompileArgsRR(instance: *mut c_void, callback: *const c_void, args: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_apply_const_ExtractArgsCallbackR(instance: *mut c_void, callback: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_apply_const_vectorLMatGR_const_vectorLMatGR_GCompileArgsRR(instance: *mut c_void, ins: *const c_void, outs: *const c_void, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_const_vectorLMatGR_const_vectorLMatGR(instance: *mut c_void, ins: *const c_void, outs: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_MatR_GCompileArgsRR(instance: *mut c_void, in_: *mut c_void, out: *mut c_void, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_MatR(instance: *mut c_void, in_: *mut c_void, out: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_ScalarR_GCompileArgsRR(instance: *mut c_void, in_: *mut c_void, out: *mut core::Scalar, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_ScalarR(instance: *mut c_void, in_: *mut c_void, out: *mut core::Scalar, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_Mat_MatR_GCompileArgsRR(instance: *mut c_void, in1: *mut c_void, in2: *mut c_void, out: *mut c_void, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_Mat_MatR(instance: *mut c_void, in1: *mut c_void, in2: *mut c_void, out: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_Mat_ScalarR_GCompileArgsRR(instance: *mut c_void, in1: *mut c_void, in2: *mut c_void, out: *mut core::Scalar, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_Mat_Mat_ScalarR(instance: *mut c_void, in1: *mut c_void, in2: *mut c_void, out: *mut core::Scalar, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_const_vectorLMatGR_vectorLMatGR_GCompileArgsRR(instance: *mut c_void, ins: *const c_void, outs: *mut c_void, args: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_apply_const_vectorLMatGR_vectorLMatGR(instance: *mut c_void, ins: *const c_void, outs: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GComputation_compileStreaming_GCompileArgsRR(instance: *mut c_void, args: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_compileStreaming(instance: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_compileStreaming_const_ExtractMetaCallbackR_GCompileArgsRR(instance: *mut c_void, callback: *const c_void, args: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_compileStreaming_const_ExtractMetaCallbackR(instance: *mut c_void, callback: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GComputation_delete(instance: *mut c_void);
pub fn cv_GFrame_GFrame(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GFrame_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GFrame_delete(instance: *mut c_void);
pub fn cv_GFrameDesc_operatorEQ_const_const_GFrameDescR(instance: *const c_void, unnamed: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GFrameDesc_propFmt_const(instance: *const c_void, ocvrs_return: *mut crate::gapi::MediaFormat);
pub fn cv_GFrameDesc_propFmt_const_MediaFormat(instance: *mut c_void, val: crate::gapi::MediaFormat);
pub fn cv_GFrameDesc_propSize_const(instance: *const c_void, ocvrs_return: *mut core::Size);
pub fn cv_GFrameDesc_propSize_const_Size(instance: *mut c_void, val: *const core::Size);
pub fn cv_GFrameDesc_delete(instance: *mut c_void);
pub fn cv_GKernel_propName_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernel_propName_const_string(instance: *mut c_void, val: *const c_char);
pub fn cv_GKernel_propTag_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernel_propTag_const_string(instance: *mut c_void, val: *const c_char);
pub fn cv_GKernel_propOutShapes_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernel_propOutShapes_const_GShapes(instance: *mut c_void, val: *const c_void);
pub fn cv_GKernel_propInKinds_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernel_propInKinds_const_GKinds(instance: *mut c_void, val: *const c_void);
pub fn cv_GKernel_propOutKinds_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernel_propOutKinds_const_GKinds(instance: *mut c_void, val: *const c_void);
pub fn cv_GKernel_delete(instance: *mut c_void);
pub fn cv_GKernelImpl_propOpaque_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernelImpl_propOpaque_const_any(instance: *mut c_void, val: *const c_void);
pub fn cv_GKernelImpl_delete(instance: *mut c_void);
pub fn cv_GKernelPackage_include_const_GFunctorR(instance: *mut c_void, functor: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GKernelPackage_size_const(instance: *const c_void, ocvrs_return: *mut Result<size_t>);
pub fn cv_GKernelPackage_get_transformations_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GKernelPackage_get_kernel_ids_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GKernelPackage_remove_const_GBackendR(instance: *mut c_void, backend: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GKernelPackage_includesAPI_const_const_stringR(instance: *const c_void, id: *const c_char, ocvrs_return: *mut Result<bool>);
pub fn cv_GKernelPackage_lookup_const_const_stringR(instance: *const c_void, id: *const c_char, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GKernelPackage_include_const_GBackendR_const_stringR(instance: *mut c_void, backend: *const c_void, kernel_id: *const c_char, ocvrs_return: *mut ResultVoid);
pub fn cv_GKernelPackage_backends_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GKernelPackage_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GKernelPackage_defaultNew_const() -> *mut c_void;
pub fn cv_GKernelPackage_delete(instance: *mut c_void);
pub fn cv_GMat_GMat(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMat_GMat_Mat(m: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMat_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GMat_delete(instance: *mut c_void);
pub fn cv_GMatDesc_GMatDesc_int_int_Size_bool(d: i32, c: i32, s: *const core::Size, p: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_GMatDesc_int_int_Size(d: i32, c: i32, s: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_GMatDesc_int_const_vectorLintGR(d: i32, dd: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_GMatDesc_int_vectorLintGRR(d: i32, dd: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_GMatDesc(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_operatorEQ_const_const_GMatDescR(instance: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GMatDesc_operatorNE_const_const_GMatDescR(instance: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GMatDesc_isND_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GMatDesc_canDescribe_const_const_MatR(instance: *const c_void, mat: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GMatDesc_canDescribe_const_const_RMatR(instance: *const c_void, mat: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GMatDesc_withSizeDelta_const_Size(instance: *const c_void, delta: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_withSizeDelta_const_int_int(instance: *const c_void, dx: i32, dy: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_withSize_const_Size(instance: *const c_void, sz: *const core::Size, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_withDepth_const_int(instance: *const c_void, ddepth: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_withType_const_int_int(instance: *const c_void, ddepth: i32, dchan: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_asPlanar_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_asPlanar_const_int(instance: *const c_void, planes: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_asInterleaved_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GMatDesc_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GMatDesc_propDepth_const(instance: *const c_void) -> i32;
pub fn cv_GMatDesc_propDepth_const_int(instance: *mut c_void, val: i32);
pub fn cv_GMatDesc_propChan_const(instance: *const c_void) -> i32;
pub fn cv_GMatDesc_propChan_const_int(instance: *mut c_void, val: i32);
pub fn cv_GMatDesc_propSize_const(instance: *const c_void, ocvrs_return: *mut core::Size);
pub fn cv_GMatDesc_propSize_const_Size(instance: *mut c_void, val: *const core::Size);
pub fn cv_GMatDesc_propPlanar_const(instance: *const c_void) -> bool;
pub fn cv_GMatDesc_propPlanar_const_bool(instance: *mut c_void, val: bool);
pub fn cv_GMatDesc_propDims_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GMatDesc_propDims_const_vectorLintG(instance: *mut c_void, val: *const c_void);
pub fn cv_GMatDesc_delete(instance: *mut c_void);
pub fn cv_GMatP_to_GMat(instance: *mut c_void) -> *mut c_void;
pub fn cv_GMatP_delete(instance: *mut c_void);
pub fn cv_GOpaqueDesc_operatorEQ_const_const_GOpaqueDescR(instance: *const c_void, unnamed: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GOpaqueDesc_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GOpaqueDesc_defaultNew_const() -> *mut c_void;
pub fn cv_GOpaqueDesc_delete(instance: *mut c_void);
pub fn cv_GRunArg_GRunArg(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GRunArg_GRunArg_const_GRunArgR(arg: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GRunArg_GRunArg_GRunArgRR(arg: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GRunArg_operatorST_const_GRunArgR(instance: *mut c_void, arg: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GRunArg_operatorST_GRunArgRR(instance: *mut c_void, arg: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GRunArg_delete(instance: *mut c_void);
pub fn cv_GScalar_GScalar(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GScalar_GScalar_const_ScalarR(s: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GScalar_GScalar_ScalarRR(s: *mut core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GScalar_GScalar_double(v0: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GScalar_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GScalar_delete(instance: *mut c_void);
pub fn cv_GScalarDesc_operatorEQ_const_const_GScalarDescR(instance: *const c_void, unnamed: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GScalarDesc_operatorNE_const_const_GScalarDescR(instance: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GScalarDesc_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GScalarDesc_defaultNew_const() -> *mut c_void;
pub fn cv_GScalarDesc_delete(instance: *mut c_void);
pub fn cv_GStreamingCompiled_GStreamingCompiled(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_GStreamingCompiled_setSource_GRunArgsRR(instance: *mut c_void, ins: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GStreamingCompiled_setSource_const_ExtractArgsCallbackR(instance: *mut c_void, callback: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GStreamingCompiled_start(instance: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GStreamingCompiled_stop(instance: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_GStreamingCompiled_running_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GStreamingCompiled_operator_bool_const(instance: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_GStreamingCompiled_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GStreamingCompiled_delete(instance: *mut c_void);
pub fn cv_GTransform_propDescription_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GTransform_propDescription_const_string(instance: *mut c_void, val: *const c_char);
pub fn cv_GTransform_delete(instance: *mut c_void);
pub fn cv_GTypeInfo_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_GTypeInfo_defaultNew_const() -> *mut c_void;
pub fn cv_GTypeInfo_propShape_const(instance: *const c_void, ocvrs_return: *mut crate::gapi::GShape);
pub fn cv_GTypeInfo_propShape_const_GShape(instance: *mut c_void, val: crate::gapi::GShape);
pub fn cv_GTypeInfo_propKind_const(instance: *const c_void, ocvrs_return: *mut crate::gapi::Detail_OpaqueKind);
pub fn cv_GTypeInfo_propKind_const_OpaqueKind(instance: *mut c_void, val: crate::gapi::Detail_OpaqueKind);
pub fn cv_GTypeInfo_delete(instance: *mut c_void);
pub fn cv_MediaFrame_MediaFrame(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_MediaFrame_desc_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_MediaFrame_blobParams_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_MediaFrame_delete(instance: *mut c_void);
pub fn cv_MediaFrame_IAdapter_meta_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_MediaFrame_IAdapter_blobParams_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_MediaFrame_IAdapter_delete(instance: *mut c_void);
pub fn cv_MediaFrame_View_View_ViewRR(unnamed: *mut c_void) -> *mut c_void;
pub fn cv_MediaFrame_View_delete(instance: *mut c_void);
pub fn cv_RMat_RMat() -> *mut c_void;
pub fn cv_RMat_desc_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_RMat_delete(instance: *mut c_void);
pub fn cv_RMat_IAdapter_desc_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_RMat_IAdapter_delete(instance: *mut c_void);
pub fn cv_RMat_View_View() -> *mut c_void;
pub fn cv_RMat_View_View_ViewRR(unnamed: *mut c_void) -> *mut c_void;
pub fn cv_RMat_View_operatorST_ViewRR(instance: *mut c_void, v: *mut c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_RMat_View_size_const(instance: *const c_void, ocvrs_return: *mut Result<core::Size>);
pub fn cv_RMat_View_dims_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_RMat_View_cols_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_RMat_View_rows_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_RMat_View_type_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_RMat_View_depth_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_RMat_View_chan_const(instance: *const c_void, ocvrs_return: *mut Result<i32>);
pub fn cv_RMat_View_elemSize_const(instance: *const c_void, ocvrs_return: *mut Result<size_t>);
pub fn cv_RMat_View_step_const_size_t(instance: *const c_void, i: size_t, ocvrs_return: *mut Result<size_t>);
pub fn cv_RMat_View_step_const(instance: *const c_void, ocvrs_return: *mut Result<size_t>);
pub fn cv_RMat_View_steps_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_RMat_View_delete(instance: *mut c_void);
pub fn cv_detail_ExtractArgsCallback_operator___const_const_GTypesInfoR(instance: *const c_void, info: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_detail_ExtractArgsCallback_delete(instance: *mut c_void);
pub fn cv_detail_ExtractMetaCallback_delete(instance: *mut c_void);
pub fn cv_detail_GArrayU_delete(instance: *mut c_void);
pub fn cv_detail_GOpaqueU_delete(instance: *mut c_void);
pub fn cv_gapi_GBackend_GBackend(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_GBackend_hash_const(instance: *const c_void, ocvrs_return: *mut Result<size_t>);
pub fn cv_gapi_GBackend_operatorEQ_const_const_GBackendR(instance: *const c_void, rhs: *const c_void, ocvrs_return: *mut Result<bool>);
pub fn cv_gapi_GBackend_delete(instance: *mut c_void);
pub fn cv_gapi_GFunctor_impl_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_GFunctor_backend_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_GFunctor_id_const(instance: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_GFunctor_delete(instance: *mut c_void);
pub fn cv_gapi_own_Scalar_Scalar() -> *mut c_void;
pub fn cv_gapi_own_Scalar_Scalar_double(v0: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_own_Scalar_Scalar_double_double_double_double(v0: f64, v1: f64, v2: f64, v3: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_own_Scalar_Scalar_double_double(v0: f64, v1: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_own_Scalar_operator___const_int(instance: *const c_void, i: i32, ocvrs_return: *mut Result<f64>);
pub fn cv_gapi_own_Scalar_operator___int(instance: *mut c_void, i: i32, ocvrs_return: *mut Result<f64>);
pub fn cv_gapi_own_Scalar_all_double(v0: f64, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_own_Scalar_propVal_const(instance: *const c_void) -> *const [f64; 4];
pub fn cv_gapi_own_Scalar_propVal(instance: *mut c_void) -> *mut [f64; 4];
pub fn cv_gapi_own_Scalar_delete(instance: *mut c_void);
pub fn cv_gapi_streaming_queue_capacity_queue_capacity_size_t(cap: size_t, ocvrs_return: *mut Result<crate::gapi::queue_capacity>);
pub fn cv_gapi_streaming_queue_capacity_queue_capacity(ocvrs_return: *mut Result<crate::gapi::queue_capacity>);
pub fn cv_gapi_use_only_propPkg_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_use_only_propPkg_const_GKernelPackage(instance: *mut c_void, val: *const c_void);
pub fn cv_gapi_use_only_delete(instance: *mut c_void);
pub fn cv_gapi_wip_Data_to_GRunArg(instance: *mut c_void) -> *mut c_void;
pub fn cv_gapi_wip_Data_delete(instance: *mut c_void);
pub fn cv_gapi_wip_draw_Circle_Circle_const_PointR_int_const_ScalarR_int_int_int(center_: *const core::Point, radius_: i32, color_: *const core::Scalar, thick_: i32, lt_: i32, shift_: i32, ocvrs_return: *mut Result<crate::gapi::Circle>);
pub fn cv_gapi_wip_draw_Circle_Circle_const_PointR_int_const_ScalarR(center_: *const core::Point, radius_: i32, color_: *const core::Scalar, ocvrs_return: *mut Result<crate::gapi::Circle>);
pub fn cv_gapi_wip_draw_Circle_Circle(ocvrs_return: *mut crate::gapi::Circle);
pub fn cv_gapi_wip_draw_Image_Image_const_PointR_const_MatR_const_MatR(org_: *const core::Point, img_: *const c_void, alpha_: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_wip_draw_Image_Image() -> *mut c_void;
pub fn cv_gapi_wip_draw_Image_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Image_propOrg_const(instance: *const c_void, ocvrs_return: *mut core::Point);
pub fn cv_gapi_wip_draw_Image_propOrg_const_Point(instance: *mut c_void, val: *const core::Point);
pub fn cv_gapi_wip_draw_Image_propImg_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Image_propImg_const_Mat(instance: *mut c_void, val: *const c_void);
pub fn cv_gapi_wip_draw_Image_propAlpha_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Image_propAlpha_const_Mat(instance: *mut c_void, val: *const c_void);
pub fn cv_gapi_wip_draw_Image_delete(instance: *mut c_void);
pub fn cv_gapi_wip_draw_Line_Line_const_PointR_const_PointR_const_ScalarR_int_int_int(pt1_: *const core::Point, pt2_: *const core::Point, color_: *const core::Scalar, thick_: i32, lt_: i32, shift_: i32, ocvrs_return: *mut Result<crate::gapi::Line>);
pub fn cv_gapi_wip_draw_Line_Line_const_PointR_const_PointR_const_ScalarR(pt1_: *const core::Point, pt2_: *const core::Point, color_: *const core::Scalar, ocvrs_return: *mut Result<crate::gapi::Line>);
pub fn cv_gapi_wip_draw_Line_Line(ocvrs_return: *mut crate::gapi::Line);
pub fn cv_gapi_wip_draw_Mosaic_Mosaic_const_RectR_int_int(mos_: *const core::Rect, cell_sz_: i32, decim_: i32, ocvrs_return: *mut Result<crate::gapi::Mosaic>);
pub fn cv_gapi_wip_draw_Mosaic_Mosaic(ocvrs_return: *mut Result<crate::gapi::Mosaic>);
pub fn cv_gapi_wip_draw_Poly_Poly_const_vectorLPointGR_const_ScalarR_int_int_int(points_: *const c_void, color_: *const core::Scalar, thick_: i32, lt_: i32, shift_: i32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_wip_draw_Poly_Poly_const_vectorLPointGR_const_ScalarR(points_: *const c_void, color_: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_wip_draw_Poly_Poly() -> *mut c_void;
pub fn cv_gapi_wip_draw_Poly_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Poly_propPoints_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Poly_propPoints_const_vectorLPointG(instance: *mut c_void, val: *const c_void);
pub fn cv_gapi_wip_draw_Poly_propColor_const(instance: *const c_void, ocvrs_return: *mut core::Scalar);
pub fn cv_gapi_wip_draw_Poly_propColor_const_Scalar(instance: *mut c_void, val: *const core::Scalar);
pub fn cv_gapi_wip_draw_Poly_propThick_const(instance: *const c_void) -> i32;
pub fn cv_gapi_wip_draw_Poly_propThick_const_int(instance: *mut c_void, val: i32);
pub fn cv_gapi_wip_draw_Poly_propLt_const(instance: *const c_void) -> i32;
pub fn cv_gapi_wip_draw_Poly_propLt_const_int(instance: *mut c_void, val: i32);
pub fn cv_gapi_wip_draw_Poly_propShift_const(instance: *const c_void) -> i32;
pub fn cv_gapi_wip_draw_Poly_propShift_const_int(instance: *mut c_void, val: i32);
pub fn cv_gapi_wip_draw_Poly_delete(instance: *mut c_void);
pub fn cv_gapi_wip_draw_Rect_Rect_const_RectR_const_ScalarR_int_int_int(rect_: *const core::Rect, color_: *const core::Scalar, thick_: i32, lt_: i32, shift_: i32, ocvrs_return: *mut Result<crate::gapi::Rect>);
pub fn cv_gapi_wip_draw_Rect_Rect_const_RectR_const_ScalarR(rect_: *const core::Rect, color_: *const core::Scalar, ocvrs_return: *mut Result<crate::gapi::Rect>);
pub fn cv_gapi_wip_draw_Rect_Rect(ocvrs_return: *mut crate::gapi::Rect);
pub fn cv_gapi_wip_draw_Text_Text_const_stringR_const_PointR_int_double_const_ScalarR_int_int_bool(text_: *const c_char, org_: *const core::Point, ff_: i32, fs_: f64, color_: *const core::Scalar, thick_: i32, lt_: i32, bottom_left_origin_: bool, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_wip_draw_Text_Text_const_stringR_const_PointR_int_double_const_ScalarR(text_: *const c_char, org_: *const core::Point, ff_: i32, fs_: f64, color_: *const core::Scalar, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_gapi_wip_draw_Text_Text() -> *mut c_void;
pub fn cv_gapi_wip_draw_Text_implicitClone_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Text_propText_const(instance: *const c_void) -> *mut c_void;
pub fn cv_gapi_wip_draw_Text_propText_const_string(instance: *mut c_void, val: *const c_char);
pub fn cv_gapi_wip_draw_Text_propOrg_const(instance: *const c_void, ocvrs_return: *mut core::Point);
pub fn cv_gapi_wip_draw_Text_propOrg_const_Point(instance: *mut c_void, val: *const core::Point);
pub fn cv_gapi_wip_draw_Text_propFf_const(instance: *const c_void) -> i32;
pub fn cv_gapi_wip_draw_Text_propFf_const_int(instance: *mut c_void, val: i32);
pub fn cv_gapi_wip_draw_Text_propFs_const(instance: *const c_void) -> f64;
pub fn cv_gapi_wip_draw_Text_propFs_const_double(instance: *mut c_void, val: f64);
pub fn cv_gapi_wip_draw_Text_propColor_const(instance: *const c_void, ocvrs_return: *mut core::Scalar);
pub fn cv_gapi_wip_draw_Text_propColor_const_Scalar(instance: *mut c_void, val: *const core::Scalar);
pub fn cv_gapi_wip_draw_Text_propThick_const(instance: *const c_void) -> i32;
pub fn cv_gapi_wip_draw_Text_propThick_const_int(instance: *mut c_void, val: i32);
pub fn cv_gapi_wip_draw_Text_propLt_const(instance: *const c_void) -> i32;
pub fn cv_gapi_wip_draw_Text_propLt_const_int(instance: *mut c_void, val: i32);
pub fn cv_gapi_wip_draw_Text_propBottom_left_origin_const(instance: *const c_void) -> bool;
pub fn cv_gapi_wip_draw_Text_propBottom_left_origin_const_bool(instance: *mut c_void, val: bool);
pub fn cv_gapi_wip_draw_Text_delete(instance: *mut c_void);
pub fn cv_use_threaded_executor_use_threaded_executor(ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_use_threaded_executor_use_threaded_executor_const_uint32_t(nthreads: u32, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_use_threaded_executor_propNum_threads_const(instance: *const c_void) -> u32;
pub fn cv_use_threaded_executor_propNum_threads_const_uint32_t(instance: *mut c_void, val: u32);
pub fn cv_use_threaded_executor_delete(instance: *mut c_void);
pub fn cv_util_any_any_const_anyR(src: *const c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_util_any_any_anyR(src: *mut c_void, ocvrs_return: *mut Result<*mut c_void>);
pub fn cv_util_any_any() -> *mut c_void;
pub fn cv_util_any_any_anyRR(unnamed: *mut c_void) -> *mut c_void;
pub fn cv_util_any_operatorST_anyRR(instance: *mut c_void, unnamed: *mut c_void);
pub fn cv_util_any_operatorST_const_anyR(instance: *mut c_void, src: *const c_void, ocvrs_return: *mut ResultVoid);
pub fn cv_util_any_delete(instance: *mut c_void);
